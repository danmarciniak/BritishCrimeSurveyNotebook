{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1dXf9kivrd9Gq5UJTJQ2XtCs_8fZO39b4","authorship_tag":"ABX9TyPVZmqVsNnWbquJmVuXP6SQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Getting Ready for the Dissertation - British Crime Survey Notebook"],"metadata":{"id":"jV4KPzyw6zRl"}},{"cell_type":"markdown","source":["This notebook has been created to allow for an easy way to conduct a basic analysis of variables within the Crime Survey for England and Wales 2019-2020. Please download the dataset from here: https://beta.ukdataservice.ac.uk/datacatalogue/studies/study?id=8812.\n","\n","You will need to place the file \"***csew_apr19mar20_nvf.sav***\" in the folder on the left. You can use drag-and-drop to do so.\n","\n","To use this notebook: go cell by cell and press the play button. This will execute the code in each cell. Some cells offer you to pick your own values (e.g. selecting variables from the dataset). After picking a value or making a change, run the relevant cell again to see the results.\n","\n","If you use outputs from this notebook in your analysis, please reference the dataset as:\n","\n","Office for National Statistics. (2021). Crime Survey for England and Wales, 2019-2020. [data collection]. UK Data Service. SN: 8812, DOI: http://doi.org/10.5255/UKDA-SN-8812-1\n","\n","and the notebook as:\n","\n","Marciniak, Daniel. (2024). Getting Ready for the Dissertation - British Crime Survey Notebook. Not publicly available.\n","\n","Feel free to mess around with the code. You can always start from scratch if things go wrong.\n"],"metadata":{"id":"ierNtYtH55cz"}},{"cell_type":"code","source":["#install pyreadstat to be able to read SPSS *.sav files\n","!pip install --quiet pyreadstat"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uEUJkyZcoh_9","executionInfo":{"status":"ok","timestamp":1712924130211,"user_tz":-60,"elapsed":26368,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"9d92e4db-0b69-4db9-8029-87d9e012ea13"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/2.8 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.1/2.8 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:02\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.6/2.8 MB\u001b[0m \u001b[31m9.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/2.8 MB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━\u001b[0m \u001b[32m2.2/2.8 MB\u001b[0m \u001b[31m15.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m2.8/2.8 MB\u001b[0m \u001b[31m16.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.8/2.8 MB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"W5D7m6oDndv_","executionInfo":{"status":"ok","timestamp":1712924132093,"user_tz":-60,"elapsed":1885,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}}},"outputs":[],"source":["#import all code libraries used in this notebook\n","import pandas as pd\n","import pyreadstat\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from scipy import stats"]},{"cell_type":"code","source":["#loading the data (this may take a while)\n","path = \"/content/csew_apr19mar20_nvf.sav\" #set location where file is saved (you can also save the file in Google Drive if you have a Google account, just change the path accordingly)\n","df, meta = pyreadstat.read_file_multiprocessing(pyreadstat.read_sav, path)"],"metadata":{"id":"fjp7xmpLptY0","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"error","timestamp":1712924145791,"user_tz":-60,"elapsed":593,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"0e8ed8df-f8c5-45d2-8739-0b0c03eb7cb4"},"execution_count":3,"outputs":[{"output_type":"error","ename":"PyreadstatError","evalue":"File /content/csew_apr19mar20_nvf.sav does not exist!","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mPyreadstatError\u001b[0m                           Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-18f8527d591f>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#loading the data (this may take a while)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/csew_apr19mar20_nvf.sav\"\u001b[0m \u001b[0;31m#set location where file is saved (you can also save the file in Google Drive if you have a Google account, just change the path accordingly)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyreadstat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_file_multiprocessing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpyreadstat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_sav\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32mpyreadstat/pyreadstat.pyx\u001b[0m in \u001b[0;36mpyreadstat.pyreadstat.read_file_multiprocessing\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpyreadstat/pyreadstat.pyx\u001b[0m in \u001b[0;36mpyreadstat.pyreadstat.read_sav\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpyreadstat/_readstat_parser.pyx\u001b[0m in \u001b[0;36mpyreadstat._readstat_parser.run_conversion\u001b[0;34m()\u001b[0m\n","\u001b[0;31mPyreadstatError\u001b[0m: File /content/csew_apr19mar20_nvf.sav does not exist!"]}]},{"cell_type":"code","source":["df2 = df"],"metadata":{"id":"NbDMU79nrGZx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = df2"],"metadata":{"id":"3Bp90nyUs2AB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#restrict data to responses from the main sample (see samptype in data dictionary)\n","df = df[df['samptype'] == 1]"],"metadata":{"id":"3CQiUR6V-FtQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#create a list of all variables in the dataset\n","varlist = df.columns.to_list()\n","print(varlist)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L_NTK-SQCKBq","executionInfo":{"status":"ok","timestamp":1712853793617,"user_tz":-60,"elapsed":398,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"de6c7bc6-ec86-4c5b-c5c8-de8c77e9bce5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['rowlabel', 'serial', 'screen', 'year', 'samptype', 'split', 'subsplit', 'hselec', 'adults_s', 'numcheck', 'adults_i', 'nadults', 'sex', 'sex2', 'sex3', 'sex4', 'sex5', 'sex6', 'sex7', 'sex8', 'sex9', 'sex10', 'age', 'age2', 'age3', 'age4', 'age5', 'age6', 'age7', 'age8', 'age9', 'age10', 'bage', 'bage2', 'bage3', 'bage4', 'bage5', 'bage6', 'bage7', 'bage8', 'bage9', 'bage10', 'cohab', 'cohab2', 'cohab3', 'cohab4', 'cohab5', 'cohab6', 'cohab7', 'cohab8', 'cohab9', 'cohab10', 'reltores', 'reltore2', 'reltore3', 'reltore4', 'reltore5', 'reltore6', 'reltore7', 'reltore8', 'reltore9', 'reltor10', 'whohrp', 'whohrp2', 'whohrp3', 'whohrp4', 'whohrp5', 'whohrp6', 'whohrp7', 'whohrp8', 'whohrp9', 'whohrp10', 'nchil', 'csex01', 'csex02', 'csex03', 'csex04', 'csex05', 'csex06', 'csex07', 'csex08', 'csex09', 'csex10', 'crela01', 'crela02', 'crela03', 'crela04', 'crela05', 'crela06', 'crela07', 'crela08', 'crela09', 'crela10', 'nonrsp1', 'yrsarea', 'yrsaddr', 'mthsaddr', 'resyrago', 'mthmove', 'intern1', 'motorcyc', 'nummobi', 'car', 'numcar', 'cartot', 'dftdrive', 'ownbike', 'nownbike', 'qualif2', 'quallife', 'walkdark', 'wburgl', 'wmugged', 'wcarstol', 'wfromcar', 'wraped', 'wattack', 'wraceatt', 'wident', 'wfraud', 'percll3', 'perclc2', 'noisneig', 'teenhang', 'rubbish', 'vandals', 'druguse', 'drunk', 'abancar', 'weekday', 'unoccw', 'unoccl', 'pubeve', 'club', 'mottheft', 'nmotthef', 'motstole', 'nmotstol', 'cardamag', 'ncardam', 'biktheft', 'nbikthef', 'prevthef', 'nprevthe', 'prevdam', 'nprevdam', 'prevtry', 'nprevtry', 'prevstol', 'nprevsto', 'proside', 'nproside', 'prdeface', 'nprdefac', 'homethef', 'nhomthef', 'yrhothef', 'nyrhthef', 'yrhodam', 'nyrhodam', 'yrhotry', 'nyrhotry', 'yrhostol', 'nyrhosto', 'yroside', 'nyroside', 'yrdeface', 'nyrdefac', 'persthef', 'npersth', 'trypers', 'ntrypers', 'oththef', 'noththef', 'delibdam', 'ndelibda', 'delibvio', 'ndelibv', 'threviol2', 'nthrevio', 'sexattak', 'nsexatt', 'adulthh', 'hhldviol', 'nhhldvio', 'fininc', 'nfininc', 'noncon', 'nnoncon', 'con', 'ncon', 'trycon', 'ntrycon', 'cmact2', 'ncmact', 'virus', 'totnvir', 'virusck2', 'nvirus', 'whopresa', 'whopresb', 'whopresc', 'whopresd', 'whoprese', 'whopresf', 'mobile', 'mobwh', 'mobwh2', 'mobwh3', 'mobwh4', 'mobwh5', 'mobwh6', 'mobwh7', 'mobwh8', 'mobwh9', 'mobwh10', 'mobwhc1', 'mobwhc2', 'mobwhc3', 'mobwhc4', 'mobwhc5', 'mobwhc6', 'mobwhc7', 'mobwhc8', 'mobwhc9', 'mobwhc10', 'mobstole', 'whmbs', 'whmbs2', 'whmbs3', 'whmbs4', 'whmbs5', 'whmbs6', 'whmbs7', 'whmbs8', 'whmbs9', 'whmbs10', 'whmbsc1', 'whmbsc2', 'whmbsc3', 'whmbsc4', 'whmbsc5', 'whmbsc6', 'whmbsc7', 'whmbsc8', 'whmbsc9', 'whmbsc10', 'whmbs11', 'wrmbs', 'mobsaf1a', 'mobsaf1b', 'mobsaf1c', 'mobsaf1d', 'mobsaf1e', 'mobsaf1f', 'mobsaf1g', 'mobsaf1h', 'mobsaf1i', 'mobsaf1j', 'mobsaf1k', 'whymoba', 'whymobb', 'whymobc', 'whymobd', 'whymobe', 'whymobf', 'whymobg', 'whymobh', 'cjscpsb', 'cjscrt2a', 'cjscrt2b', 'cjsovb1', 'fairova1', 'poltrst', 'poltru2a', 'poltru2b', 'poltru2c', 'poltru2d', 'poltru2e', 'poltru2f', 'poltru2g', 'poltru2h', 'poltru2i', 'poltru2j', 'poltru2k', 'poltru2l', 'poltru2m', 'poltru2n', 'poltru2o', 'ratpol2', 'locpolcc1a', 'locpolcc1b', 'locpolcc1c', 'locpolcc1d', 'locpolcc1e', 'locpolcc1f', 'locpolcc1g', 'locpolcc2', 'polatt1', 'polatt2', 'polatt3', 'polatt5', 'polatt6', 'polatt6b', 'polatt7', 'commatt2', 'pcc03', 'pcccon', 'pcccon4a', 'pcccon4b', 'pcccon4c', 'pcccon4d', 'pcccon4e', 'pcccon4f', 'pcccon4g', 'pcccon4h', 'pcccon4i', 'pcccon4j', 'pcccon4k', 'pcccon4l', 'pcccon3a', 'pcccon3b', 'pcccon3c', 'pcccon3d', 'pcccon3e', 'pcccon3f', 'pcccon3g', 'pcccon3h', 'pcccon3i', 'pcccon3j', 'pcccon3k', 'pccnew3', 'pccnew3a', 'pccnew3b', 'ncaaware1', 'ratnccyber', 'witcri', 'witcri2', 'witcri3', 'crtatt', 'crttyp1a', 'crttyp1b', 'crttyp1c', 'crttyp1d', 'crttyp1e', 'crttyp1f', 'crcrtat', 'crtinf1', 'crtinf2', 'vcphear', 'pfilter', 'polvola', 'polvolb', 'polvolc', 'polvold', 'polvole', 'pfoot', 'pfoot2', 'polvis', 'polvis2a', 'polvis2b', 'polvis2c', 'polvis2d', 'polvis2e', 'polvis2f', 'polvis2g', 'polvis2h', 'polvis2i', 'polvis2j', 'polvis2k', 'locpcon2a', 'locpcon2b', 'locpcon2c', 'locpcon2d', 'locpcon2e', 'locpcon2f', 'locpcon2g', 'locpcon2h', 'locpcon2i', 'locpcon2j', 'locpcon2k', 'locpcon2l', 'locpcon2m', 'locpcon2n', 'locpcon2o', 'locpcon2p', 'locpcon2q', 'locpcon2r', 'locpcon2s', 'locpcon2t', 'locpcon2u', 'locpcon2v', 'locpcon2w', 'anycontp', 'whatcoa', 'whatcob', 'whatcoc', 'whatcod', 'whatcoe', 'whatcof', 'whatcog', 'whatcoh', 'whatcoi', 'whatcoj', 'whatcok', 'whatcol', 'whatcom', 'whatcon', 'whatcoo', 'whatcop', 'whatcoq', 'whatcor', 'whatcos', 'pknw101', 'pcon101', 'copbhav2', 'copbhav3', 'copbh5y2', 'copbhv3a', 'copbhv3b', 'copbhv3c', 'copbhv3d', 'copbhv3e', 'copbhv3f', 'copbhv3g', 'copbhv3h', 'copbhv3i', 'copbhv3j', 'copbhv3k', 'copbhv3l', 'copbhv3m', 'copbhv3n', 'copbhv3o', 'copbhv3p', 'copbhv3q', 'actcmpl2', 'satiscm2', 'wynocom3', 'burgalar', 'deadlock', 'chains', 'windlck2', 'timliin', 'timliout', 'secyr5a', 'secyr5b', 'secyr5c', 'secyr5d', 'secyr5e', 'secyr5f', 'secyr5g', 'secyr5h', 'secyr5i', 'secyr5j', 'secyr5k', 'secyr5l', 'secyr5m', 'secyr5n', 'secyr5o', 'secyr5p', 'secyr5q', 'secbehyr', 'ysecyr4a', 'ysecyr4b', 'ysecyr4c', 'ysecyr4d', 'ysecyr4e', 'ysecyr4f', 'ysecyr4g', 'ysecyr4h', 'ysecyr4i', 'ysecyr4j', 'ysecyr4k', 'ysecyr4l', 'ysecyr4m', 'ysecyr4n', 'ysecyr4o', 'ysecyr4p', 'ysecyr4q', 'ysecyr4r', 'ysecyr4s', 'ysecyr4t', 'ysecyr4u', 'ysecyr4v', 'ysecyr4w', 'ynosecya', 'ynosecyb', 'ynosecyc', 'ynosecyd', 'ynosecye', 'ynosecyf', 'ynosecyg', 'ynosecyh', 'ynosecyi', 'ynosecyj', 'ynosecyk', 'carvan', 'carvan1', 'centloc0', 'caralar0', 'immob0', 'immob02', 'vtrack', 'rcascd0', 'snav0', 'snavrem0', 'carvan2', 'centloc1', 'caralar1', 'immob1', 'immob12', 'vtracka', 'rcascd1', 'snav1', 'snavrem1', 'motsecu1a', 'motsecu1b', 'motsecu1c', 'motsecu1d', 'motsecu1e', 'motsecu1f', 'motsecu1g', 'motsecu1h', 'perseca', 'persecb', 'persecc', 'persecd', 'persece', 'persecf', 'persecg', 'persech', 'perseci', 'persecj', 'perseck', 'persecl', 'persecm', 'perscon', 'perscy2a', 'perscy2b', 'perscy2c', 'perscy2d', 'perscy2e', 'perscy2f', 'perscy2g', 'perscy2h', 'perscy2i', 'perscy2j', 'perscy2k', 'perscy2l', 'perscy2m', 'esecbhyr', 'ewhypr2a', 'ewhypr2b', 'ewhypr2c', 'ewhypr2d', 'ewhypr2e', 'ewhypr2f', 'ewhypr2g', 'ewhypr2h', 'ewhypr2i', 'ewhypr2j', 'ewhypr2k', 'ewhypr2l', 'ewhypr2m', 'qprec2a', 'qprec2b', 'qprec2c', 'qprec2d', 'qprec2e', 'qprec2f', 'qprec2g', 'qprec2h', 'qprec2i', 'qprec2j', 'qprec2k', 'qprec2l', 'qprec2m', 'qprec2n', 'qprec2o', 'qprec2q', 'qprec2p', 'qprec2r', 'qprec2s', 'asbprob', 'asbloc', 'asbexp', 'whasbexa', 'whasbexb', 'whasbexc', 'whasbexd', 'whasbexe', 'whasbexf', 'whasbexg', 'whasbexh', 'whasbexi', 'whasbexj', 'whasbexk', 'whasbexl', 'whasbexm', 'whasbexn', 'whasbexo', 'whasbexp', 'whasbexq', 'genhealt', 'onsdisab', 'onsimpa', 'onsimpb', 'onsimpc', 'onsimpd', 'onsimpe', 'onsimpf', 'onsimpg', 'onsimph', 'onsimpi', 'onsimpj', 'onsimpk', 'onsimpl', 'onsimpm', 'onsact', 'hhcarera', 'hhcarerb', 'hhcarerc', 'hhcarerd', 'hhcarere', 'work2', 'govtsch2', 'jobawy3', 'ownbus2', 'relbus2', 'lookwk5a', 'howlng', 'avsrt2a', 'whynlk3', 'whynsrt3', 'infstdy2', 'jobever2', 'whenlft', 'selfemp3', 'empstat', 'nemple3', 'sempo', 'snemp2', 'ftpt', 'workhrp2', 'hgovtsc2', 'hjobawy3', 'hownbus2', 'hrelbus2', 'hlokwk5a', 'hhowlng', 'havsrt2a', 'hwhynlk3', 'hwhynst3', 'hrpstdy2', 'hrpevrw2', 'hwhenlft', 'hrpself3', 'hempstat', 'hnemple3', 'hsempo', 'hsnemp2', 'hftpt', 'nation', 'cry2', 'came', 'relig3', 'hrpnat', 'hrpcry2', 'hrpcame', 'hrprelg3', 'educint', 'educat2', 'tenure1', 'rent1', 'rent2', 'hominsur', 'typinc2a', 'typinc2b', 'typinc2c', 'typinc2d', 'typinc2e', 'typinc2f', 'typinc2g', 'typinc2h', 'typinc2i', 'typinc2j', 'typinc2k', 'typinc2l', 'typinc2m', 'typinc2n', 'persinc2', 'othinc', 'tothhin3', 'managhh2', 'chicar1', 'chicar2', 'chicar3', 'chicar4', 'chicar5', 'chicar6', 'schtalk', 'parchka', 'parchkb', 'parchkc', 'parchkd', 'parchke', 'parchkf', 'parchkg', 'parinfoa', 'parinfob', 'parinfoc', 'parinfod', 'parinfoe', 'parinfof', 'parinfog', 'parinfoh', 'parinfoi', 'intsex', 'inner', 'rural3', 'gor', 'emdidc15', 'eincdc15', 'eempdc15', 'eedudc15', 'eheadc15', 'ecridc15', 'ehoudc15', 'eenvdc15', 'edacdc15', 'edopdc15', 'emdidc19', 'eincdc19', 'eempdc19', 'eedudc19', 'eheadc19', 'ecridc19', 'ehoudc19', 'eenvdc19', 'edacdc19', 'edopdc19', 'wmdidc14', 'wincdc14', 'wempdc14', 'wedudc14', 'wheadc14', 'waccdc14', 'wcridc14', 'wenvdc14', 'whoudc14', 'vissec2a', 'vissec2b', 'vissec2c', 'vissec2d', 'vissec2e', 'vissec2f', 'vissec2g', 'vissec2h', 'vissec2i', 'vissec2j', 'rubbcomm', 'vandcomm', 'poorhou', 'relcond', 'acctyp', 'lockable', 'accharm1', 'accharm2', 'neigwat', 'rmpcat10', 'rnssec14', 'rnssec8', 'rnssec5', 'rnssec3', 'hmpcat10', 'hnssec14', 'hnssec8', 'hnssec5', 'hnssec3', 'totlen', 'intmon', 'intyear', 'monthid', 'monthis', 'quartis', 'quarter', 'victim', 'fvictim', 'tvictim', 'victype', 'novict', 'partflag', 'agegrp', 'ageshort', 'agelong', 'sexage', 'nsethgrp', 'nad2', 'nchil2', 'nadultgp', 'nchilgrp', 'elg1015n', 'elg1015', 'kidsel', 'int1015e', 'livharm1a', 'nslgpart', 'nslivarr', 'hhinc6a2', 'hhinc4a2', 'hhinc5a2', 'hhinc7a2', 'tenharm', 'ysadharm', 'vehowner', 'hrp', 'hrpage', 'hrpagegp', 'hpagelng', 'hpagesht', 'hrpsex', 'hrpcohab', 'hrpmarit1a', 'hrpmarit2a', 'hrpmarit3a', 'struct3', 'rnsnat6', 'rnscry6', 'hnsnat6', 'hnscry6', 'rwork', 'hwork', 'rgvtsch', 'hgvtsch', 'rjbaway', 'hjbaway', 'rowbus', 'howbus', 'rrlbus', 'hrlbus', 'rlkwork', 'hlkwork', 'rlstweek', 'hlstweek', 'rstudy', 'hstudy', 'reverw', 'heverw', 'rftpt', 'hftprt', 'rselfemp', 'hselfemp', 'remplee', 'hemplee', 'remp100', 'hemp100', 'rnemp', 'hnemp', 'density', 'fin_stra4', 'ONSpsuid', 'IntQu', 'nchilgp2', 'HHMcount', 'bikowner', 'numcars', 'numcar3', 'numcar4', 'numcar5', 'agegrp7', 'YPSample', 'rworkage', 'sexage1', 'sexage14', 'hrpage7', 'hworkage', 'agelong3', 'ethgrp2a', 'ethgrp3a', 'ethgrp4a', 'ethgrp5a', 'ethnheada', 'ethnhead2a', 'relig3a', 'relig3b', 'hrprel3', 'hrprel3a', 'hrprel3b', 'illharmONS2', 'genheal2', 'health2', 'educat3', 'educat4', 'rjbaway2', 'hjbaway2', 'rlkwork2', 'hlkwork2', 'rlstweek2', 'hlstweek2', 'rstudy2', 'hstudy2', 'remploya', 'remploy2a', 'hemploya', 'hemploy2a', 'rselfemp2', 'hselfemp2', 'rnssec8a', 'hnssec8a', 'r10sec5', 'r10sec6', 'r10sec6a', 'r10sec3', 'r10sec4', 'r10sec4a', 'h10sec5', 'h10sec6', 'h10sec6a', 'h10sec3', 'h10sec4', 'h10sec4a', 'yrsaddr2', 'accharm3', 'incroute2', 'tothhin4', 'struct4', 'indlon', 'engtot', 'incscale', 'incivgrp', 'incscal1', 'resinciv', 'depremp15', 'deprcri15', 'depremp19', 'deprcri19', 'outday', 'weekday2', 'weekday3', 'unoccday', 'pub2', 'pub3', 'pub4', 'club3', 'club2', 'inter1', 'burgx', 'visibl2', 'deadx', 'timox', 'timix', 'lights', 'windlx', 'chainx', 'hhsec', 'bvpiburg2', 'bvpicar2', 'wmugged2', 'wraped2', 'wattack2', 'wraceatt2', 'bvpiviol2', 'bvpifrd2', 'percluk', 'perclloc', 'percluk2a', 'perclloc2a', 'publicc', 'showdoc', 'repcrim', 'palarm', 'pacc', 'pdirec', 'psocial', 'commatt23', 'asbexany', 'asbgroup', 'asbdrink', 'asbvand', 'asbincon', 'asbnoise', 'asbdrug', 'asbharas', 'asbrubb', 'asbneigh', 'asbvehic', 'asbbegg', 'asbsex', 'asbdogs', 'asbother', 'UKBorn', 'vandalis_nocap', 'mv.vand_nocap', 'homevand_nocap', 'burglar_nocap', 'burgatts_nocap', 'burgatno_nocap', 'burgentr_nocap', 'burgloss_nocap', 'theftdwe_nocap', 'theftfmv_nocap', 'theftomv_nocap', 'attmvthf_nocap', 'allmvthf_nocap', 'allmvcri_nocap', 'bikethef_nocap', 'othhhctd_nocap', 'tohhcltd_nocap', 'totalhh_nocap', 'acquisit_nocap', 'sexoffen_nocap', 'commonas_nocap', 'wounding_nocap', 'robbery_nocap', 'theftper_nocap', 'thfp.rob_nocap', 'compvio_nocap', 'othpthef_nocap', 'topthcls_nocap', 'totalper_nocap', 'totperls_nocap', 'allassau_nocap', 'violence_nocap', 'threats_nocap', 'totalbcs_nocap', 'allviol_nocap', 'mugging1_nocap', 'stealth_nocap', 'snatch_nocap', 'mug_stra_nocap', 'dom_acq_nocap', 'domestic_nocap', 'mugging2_nocap', 'stranger_nocap', 'acquain_nocap', 'seracq_nocap', 'othacq_nocap', 'hhldacq_nocap', 'persacq_nocap', 'allvalc_nocap', 'allvdrug_nocap', 'comasinj_nocap', 'comasni_nocap', 'violnos_nocap', 'violinj2_nocap', 'violnoi2_nocap', 'racetot_nocap', 'religtot_nocap', 'agetot_nocap', 'disabtot_nocap', 'hatetot_nocap', 'hatetot2_nocap', 'violnr_nocap', 'viwinr_nocap', 'vininr_nocap', 'althft_nocap', 'stlhea_nocap', 'snstla_nocap', 'burdnl_nocap', 'burgnd_nocap', 'burnde_nocap', 'brndel_nocap', 'bndenl_nocap', 'burnda_nocap', 'thftod_nocap', 'thftpl_nocap', 'thfthh_nocap', 'alburg_nocap', 'albure_nocap', 'albuel_nocap', 'albenl_nocap', 'albura_nocap', 'othht_nocap', 'thftdm_nocap', 'burprc_nocap', 'hvaprc_nocap', 'vioprc_nocap', 'alprop_nocap', 'alvinr_nocap', 'drvinr_nocap', 'burprc1_nocap', 'frdcom_nocap', 'frd_nocap', 'frdl_nocap', 'frdlr_nocap', 'frdnl_nocap', 'bank_nocap', 'bankl_nocap', 'banklr_nocap', 'banknl_nocap', 'afee_nocap', 'afeel_nocap', 'afeelr_nocap', 'afeenl_nocap', 'ninv_nocap', 'ninvl_nocap', 'ninvlr_nocap', 'ninvnl_nocap', 'ofrd_nocap', 'ofrdl_nocap', 'ofrdlr_nocap', 'ofrdnl_nocap', 'com_nocap', 'hackua_nocap', 'virs_nocap', 'virsl_nocap', 'virslr_nocap', 'virsnl_nocap', 'tocrfc_nocap', 'pcfc_nocap', 'frdcomc_nocap', 'frdc_nocap', 'bankc_nocap', 'afeec_nocap', 'ninvc_nocap', 'ofrdc_nocap', 'comc_nocap', 'frdcomnc_nocap', 'frdnc_nocap', 'banknc_nocap', 'afeenc_nocap', 'ninvnc_nocap', 'ofrdnc_nocap', 'comnc_nocap', 'threac_nocap', 'thrasc_nocap', 'thrsec_nocap', 'throtc_nocap', 'afof_nocap', 'afofl_nocap', 'afoflr_nocap', 'afofnl_nocap', 'totccf_nocap', 'vandalis', 'mv.vand', 'homevand', 'burglar', 'burgatts', 'burgatno', 'burgentr', 'burgloss', 'theftdwe', 'theftfmv', 'theftomv', 'attmvthf', 'allmvthf', 'allmvcri', 'bikethef', 'othhhctd', 'tohhcltd', 'totalhh', 'acquisit', 'commonas', 'wounding', 'robbery', 'theftper', 'thfp.rob', 'compvio', 'othpthef', 'topthcls', 'totalper', 'totperls', 'allassau', 'violence', 'threats', 'totalbcs', 'allviol', 'mugging1', 'stealth', 'snatch', 'mug_stra', 'dom_acq', 'domestic', 'mugging2', 'stranger', 'acquain', 'seracq', 'othacq', 'hhldacq', 'persacq', 'allvalc', 'allvdrug', 'comasinj', 'comasni', 'violnos', 'violinj2', 'violnoi2', 'racetot', 'religtot', 'agetot', 'disabtot', 'hatetot', 'hatetot2', 'violnr', 'viwinr', 'vininr', 'althft', 'stlhea', 'snstla', 'burdnl', 'burgnd', 'burnde', 'brndel', 'bndenl', 'burnda', 'thftod', 'thftpl', 'thfthh', 'alburg', 'albure', 'albuel', 'albenl', 'albura', 'othht', 'thftdm', 'burprc', 'hvaprc', 'vioprc', 'alprop', 'alvinr', 'drvinr', 'burprc1', 'frdcom', 'frd', 'frdl', 'frdlr', 'frdnl', 'bank', 'bankl', 'banklr', 'banknl', 'afee', 'afeel', 'afeelr', 'afeenl', 'ninv', 'ninvl', 'ninvlr', 'ninvnl', 'ofrd', 'ofrdl', 'ofrdlr', 'ofrdnl', 'com', 'hackua', 'virs', 'virsl', 'virslr', 'virsnl', 'tocrfc', 'pcfc', 'frdcomc', 'frdc', 'bankc', 'afeec', 'ninvc', 'ofrdc', 'comc', 'frdcomnc', 'frdnc', 'banknc', 'afeenc', 'ninvnc', 'ofrdnc', 'comnc', 'threac', 'thrasc', 'throtc', 'afof', 'afofl', 'afoflr', 'afofnl', 'totccf', 'allcrmha_nocap', 'allcrmah_nocap', 'alfcha_nocap', 'alfcah_nocap', 'vandal_i_nocap', 'mv.van_i_nocap', 'homeva_i_nocap', 'burgla_i_nocap', 'burgat_i_nocap', 'burgno_i_nocap', 'burgen_i_nocap', 'burglo_i_nocap', 'theftd_i_nocap', 'theftf_i_nocap', 'thefto_i_nocap', 'attmvt_i_nocap', 'allmvt_i_nocap', 'allmvc_i_nocap', 'biketh_i_nocap', 'othhhc_i_nocap', 'tohhcl_i_nocap', 'totalh_i_nocap', 'acquis_i_nocap', 'seracq_i_nocap', 'othacq_i_nocap', 'hhacq_i_nocap', 'common_i_nocap', 'wound_i_nocap', 'robber_i_nocap', 'theftp_i_nocap', 'thfp.r_i_nocap', 'compvi_i_nocap', 'othpth_i_nocap', 'topthc_i_nocap', 'totalp_i_nocap', 'totper_i_nocap', 'allass_i_nocap', 'violen_i_nocap', 'threat_i_nocap', 'totalb_i_nocap', 'alviol_i_nocap', 'mugg1_i_nocap', 'stealt_i_nocap', 'snatch_i_nocap', 'mug_st_i_nocap', 'dom_ac_i_nocap', 'domest_i_nocap', 'mugg2_i_nocap', 'strang_i_nocap', 'acquai_i_nocap', 'peracq_i_nocap', 'alvalc_i_nocap', 'alvdrug_i_nocap', 'cominj_i_nocap', 'comnij_i_nocap', 'viols_i_nocap', 'vioin2_i_nocap', 'viono2_i_nocap', 'racetot_i_nocap', 'religtot_i_nocap', 'agetot_i_nocap', 'disabtot_i_nocap', 'hatetot_i_nocap', 'hatetot2_i_nocap', 'violnr_i_nocap', 'viwinr_i_nocap', 'vininr_i_nocap', 'althft_i_nocap', 'stlhea_i_nocap', 'snstla_i_nocap', 'burdnl_i_nocap', 'burgnd_i_nocap', 'burnde_i_nocap', 'brndel_i_nocap', 'bndenl_i_nocap', 'burnda_i_nocap', 'thftod_i_nocap', 'thftpl_i_nocap', 'thfthh_i_nocap', 'alburg_i_nocap', 'albure_i_nocap', 'albuel_i_nocap', 'albenl_i_nocap', 'albura_i_nocap', 'othht_i_nocap', 'thftdm_i_nocap', 'burprc_i_nocap', 'burprc1_i_nocap', 'hvaprc_i_nocap', 'vioprc_i_nocap', 'alprop_i_nocap', 'alvinr_i_nocap', 'drvinr_i_nocap', 'frdcom_i_nocap', 'frd_i_nocap', 'frdl_i_nocap', 'frdlr_i_nocap', 'frdnl_i_nocap', 'bank_i_nocap', 'bankl_i_nocap', 'banklr_i_nocap', 'banknl_i_nocap', 'afee_i_nocap', 'afeel_i_nocap', 'afeelr_i_nocap', 'afeenl_i_nocap', 'ninv_i_nocap', 'ninvl_i_nocap', 'ninvlr_i_nocap', 'ninvnl_i_nocap', 'ofrd_i_nocap', 'ofrdl_i_nocap', 'ofrdlr_i_nocap', 'ofrdnl_i_nocap', 'com_i_nocap', 'hackua_i_nocap', 'virs_i_nocap', 'virsl_i_nocap', 'virslr_i_nocap', 'virsnl_i_nocap', 'tocrfc_i_nocap', 'pcfc_i_nocap', 'frdcc_i_nocap', 'frdc_i_nocap', 'bankc_i_nocap', 'afeec_i_nocap', 'ninvc_i_nocap', 'ofrdc_i_nocap', 'comc_i_nocap', 'frdcnc_i_nocap', 'frdnc_i_nocap', 'banknc_i_nocap', 'afeenc_i_nocap', 'ninvnc_i_nocap', 'ofrdnc_i_nocap', 'comnc_i_nocap', 'threac_i_nocap', 'thrasc_i_nocap', 'throtc_i_nocap', 'afof_i_nocap', 'afofl_i_nocap', 'afoflr_i_nocap', 'afofnl_i_nocap', 'totccf_i_nocap', 'allcha_i_nocap', 'allcah_i_nocap', 'alfcha_i_nocap', 'alfcah_i_nocap', 'althftha_nocap', 'althftah_nocap', 'althha_i_nocap', 'althah_i_nocap', 'alpropha_nocap', 'alpropah_nocap', 'alprha_i_nocap', 'alprah_i_nocap', 'allcrmha', 'allcrmah', 'alfcha', 'alfcah', 'vandal_i', 'mv.van_i', 'homeva_i', 'burgla_i', 'burgat_i', 'burgno_i', 'burgen_i', 'burglo_i', 'theftd_i', 'theftf_i', 'thefto_i', 'attmvt_i', 'allmvt_i', 'allmvc_i', 'biketh_i', 'othhhc_i', 'tohhcl_i', 'totalh_i', 'acquis_i', 'seracq_i', 'othacq_i', 'hhacq_i', 'common_i', 'wound_i', 'robber_i', 'theftp_i', 'thfp.r_i', 'compvi_i', 'othpth_i', 'topthc_i', 'totalp_i', 'totper_i', 'allass_i', 'violen_i', 'threat_i', 'totalb_i', 'alviol_i', 'mugg1_i', 'stealt_i', 'snatch_i', 'mug_st_i', 'dom_ac_i', 'domest_i', 'mugg2_i', 'strang_i', 'acquai_i', 'peracq_i', 'alvalc_i', 'alvdrug_i', 'cominj_i', 'comnij_i', 'viols_i', 'vioin2_i', 'viono2_i', 'racetot_i', 'religtot_i', 'agetot_i', 'disabtot_i', 'hatetot_i', 'hatetot2_i', 'violnr_i', 'viwinr_i', 'vininr_i', 'althft_i', 'stlhea_i', 'snstla_i', 'burdnl_i', 'burgnd_i', 'burnde_i', 'brndel_i', 'bndenl_i', 'burnda_i', 'thftod_i', 'thftpl_i', 'thfthh_i', 'alburg_i', 'albure_i', 'albuel_i', 'albenl_i', 'albura_i', 'othht_i', 'thftdm_i', 'burprc_i', 'burprc1_i', 'hvaprc_i', 'vioprc_i', 'alprop_i', 'alvinr_i', 'drvinr_i', 'frdcom_i', 'frd_i', 'frdl_i', 'frdlr_i', 'frdnl_i', 'bank_i', 'bankl_i', 'banklr_i', 'banknl_i', 'afee_i', 'afeel_i', 'afeelr_i', 'afeenl_i', 'ninv_i', 'ninvl_i', 'ninvlr_i', 'ninvnl_i', 'ofrd_i', 'ofrdl_i', 'ofrdlr_i', 'ofrdnl_i', 'com_i', 'hackua_i', 'virs_i', 'virsl_i', 'virslr_i', 'virsnl_i', 'tocrfc_i', 'pcfc_i', 'frdcc_i', 'frdc_i', 'bankc_i', 'afeec_i', 'ninvc_i', 'ofrdc_i', 'comc_i', 'frdcnc_i', 'frdnc_i', 'banknc_i', 'afeenc_i', 'ninvnc_i', 'ofrdnc_i', 'comnc_i', 'threac_i', 'thrasc_i', 'throtc_i', 'afof_i', 'afofl_i', 'afoflr_i', 'afofnl_i', 'totccf_i', 'allcha_i', 'allcah_i', 'alfcha_i', 'alfcah_i', 'vandal_p', 'mv.van_p', 'homeva_p', 'burgla_p', 'burgat_p', 'burgno_p', 'burgen_p', 'burglo_p', 'theftd_p', 'theftf_p', 'thefto_p', 'attmvt_p', 'allmvt_p', 'allmvc_p', 'biketh_p', 'othhhc_p', 'tohhcl_p', 'totalh_p', 'acquis_p', 'seracq_p', 'othacq_p', 'hhacq_p', 'common_p', 'wound_p', 'robber_p', 'theftp_p', 'thfp.r_p', 'compvi_p', 'othpth_p', 'topthc_p', 'totalp_p', 'totper_p', 'allass_p', 'violen_p', 'threat_p', 'totalb_p', 'alviol_p', 'mugg1_p', 'stealt_p', 'snatch_p', 'mug_st_p', 'dom_ac_p', 'domest_p', 'mugg2_p', 'strang_p', 'acquai_p', 'peracq_p', 'alvalc_p', 'alvdrug_p', 'cominj_p', 'comnij_p', 'viols_p', 'vioin2_p', 'viono2_p', 'racetot_p', 'religtot_p', 'agetot_p', 'disabtot_p', 'hatetot_p', 'hatetot2_p', 'violnr_p', 'viwinr_p', 'vininr_p', 'althft_p', 'stlhea_p', 'snstla_p', 'burdnl_p', 'burgnd_p', 'burnde_p', 'brndel_p', 'bndenl_p', 'burnda_p', 'thftod_p', 'thftpl_p', 'thfthh_p', 'alburg_p', 'albure_p', 'albuel_p', 'albenl_p', 'albura_p', 'othht_p', 'thftdm_p', 'burprc_p', 'burprc1_p', 'hvaprc_p', 'vioprc_p', 'alprop_p', 'alvinr_p', 'drvinr_p', 'frdcom_p', 'frd_p', 'frdl_p', 'frdlr_p', 'frdnl_p', 'bank_p', 'bankl_p', 'banklr_p', 'banknl_p', 'afee_p', 'afeel_p', 'afeelr_p', 'afeenl_p', 'ninv_p', 'ninvl_p', 'ninvlr_p', 'ninvnl_p', 'ofrd_p', 'ofrdl_p', 'ofrdlr_p', 'ofrdnl_p', 'com_p', 'hackua_p', 'virs_p', 'virsl_p', 'virslr_p', 'virsnl_p', 'tocrfc_p', 'pcfc_p', 'frdcc_p', 'frdc_p', 'bankc_p', 'afeec_p', 'ninvc_p', 'ofrdc_p', 'comc_p', 'frdcnc_p', 'frdnc_p', 'banknc_p', 'afeenc_p', 'ninvnc_p', 'ofrdnc_p', 'comnc_p', 'threac_p', 'thrasc_p', 'throtc_p', 'afof_p', 'afofl_p', 'afoflr_p', 'afofnl_p', 'totccf_p', 'vandal_r', 'mv.van_r', 'homeva_r', 'burgla_r', 'burgat_r', 'burgno_r', 'burgen_r', 'burglo_r', 'theftd_r', 'theftf_r', 'thefto_r', 'attmvt_r', 'allmvt_r', 'allmvc_r', 'biketh_r', 'othhhc_r', 'tohhcl_r', 'totalh_r', 'acquis_r', 'seracq_r', 'othacq_r', 'hhacq_r', 'common_r', 'wound_r', 'robber_r', 'theftp_r', 'thfp.r_r', 'compvi_r', 'othpth_r', 'topthc_r', 'totalp_r', 'totper_r', 'allass_r', 'violen_r', 'threat_r', 'totalb_r', 'alviol_r', 'mugg1_r', 'stealt_r', 'snatch_r', 'mug_st_r', 'dom_ac_r', 'domest_r', 'mugg2_r', 'strang_r', 'acquai_r', 'peracq_r', 'cominj_r', 'comnij_r', 'viols_r', 'vioin2_r', 'viono2_r', 'violnr_r', 'viwinr_r', 'vininr_r', 'althft_r', 'stlhea_r', 'snstla_r', 'burdnl_r', 'burgnd_r', 'burnde_r', 'brndel_r', 'bndenl_r', 'burnda_r', 'thftod_r', 'thftpl_r', 'thfthh_r', 'alburg_r', 'albure_r', 'albuel_r', 'albenl_r', 'albura_r', 'othht_r', 'thftdm_r', 'burprc_r', 'burprc1_r', 'hvaprc_r', 'vioprc_r', 'alprop_r', 'alvinr_r', 'drvinr_r', 'frdcom_r', 'frd_r', 'frdl_r', 'frdlr_r', 'frdnl_r', 'bank_r', 'bankl_r', 'banklr_r', 'banknl_r', 'afee_r', 'afeel_r', 'afeelr_r', 'afeenl_r', 'ninv_r', 'ninvl_r', 'ninvlr_r', 'ninvnl_r', 'ofrd_r', 'ofrdl_r', 'ofrdlr_r', 'ofrdnl_r', 'com_r', 'hackua_r', 'virs_r', 'virsl_r', 'virslr_r', 'virsnl_r', 'tocrfc_r', 'pcfc_r', 'frdcc_r', 'frdc_r', 'bankc_r', 'afeec_r', 'ninvc_r', 'ofrdc_r', 'comc_r', 'frdcnc_r', 'frdnc_r', 'banknc_r', 'afeenc_r', 'ninvnc_r', 'ofrdnc_r', 'comnc_r', 'threac_r', 'thrasc_r', 'throtc_r', 'afof_r', 'afofl_r', 'afoflr_r', 'afofnl_r', 'totccf_r', 'vandal_r2', 'mv.van_r2', 'homeva_r2', 'burgla_r2', 'burgat_r2', 'burgno_r2', 'burgen_r2', 'burglo_r2', 'theftd_r2', 'theftf_r2', 'thefto_r2', 'attmvt_r2', 'allmvt_r2', 'allmvc_r2', 'biketh_r2', 'othhhc_r2', 'tohhcl_r2', 'totalh_r2', 'acquis_r2', 'seracq_r2', 'othacq_r2', 'hhacq_r2', 'common_r2', 'wound_r2', 'robber_r2', 'theftp_r2', 'thfp.r_r2', 'compvi_r2', 'othpth_r2', 'topthc_r2', 'totalp_r2', 'totper_r2', 'allass_r2', 'violen_r2', 'threat_r2', 'totalb_r2', 'alviol_r2', 'mugg1_r2', 'stealt_r2', 'snatch_r2', 'mug_st_r2', 'dom_ac_r2', 'domest_r2', 'mugg2_r2', 'strang_r2', 'acquai_r2', 'peracq_r2', 'cominj_r2', 'comnij_r2', 'viols_r2', 'vioin2_r2', 'viono2_r2', 'violnr_r2', 'viwinr_r2', 'vininr_r2', 'althft_r2', 'stlhea_r2', 'snstla_r2', 'burdnl_r2', 'burgnd_r2', 'burnde_r2', 'brndel_r2', 'bndenl_r2', 'burnda_r2', 'thftod_r2', 'thftpl_r2', 'thfthh_r2', 'alburg_r2', 'albure_r2', 'albuel_r2', 'albenl_r2', 'albura_r2', 'othht_r2', 'thftdm_r2', 'burprc_r2', 'burprc1_r2', 'hvaprc_r2', 'vioprc_r2', 'alprop_r2', 'alvinr_r2', 'drvinr_r2', 'frdcom_r2', 'frd_r2', 'frdl_r2', 'frdlr_r2', 'frdnl_r2', 'bank_r2', 'bankl_r2', 'banklr_r2', 'banknl_r2', 'afee_r2', 'afeel_r2', 'afeelr_r2', 'afeenl_r2', 'ninv_r2', 'ninvl_r2', 'ninvlr_r2', 'ninvnl_r2', 'ofrd_r2', 'ofrdl_r2', 'ofrdlr_r2', 'ofrdnl_r2', 'com_r2', 'hackua_r2', 'virs_r2', 'virsl_r2', 'virslr_r2', 'virsnl_r2', 'tocrfc_r2', 'pcfc_r2', 'frdcc_r2', 'frdc_r2', 'bankc_r2', 'afeec_r2', 'ninvc_r2', 'ofrdc_r2', 'comc_r2', 'frdcnc_r2', 'frdnc_r2', 'banknc_r2', 'afeenc_r2', 'ninvnc_r2', 'ofrdnc_r2', 'comnc_r2', 'threac_r2', 'thrasc_r2', 'throtc_r2', 'afof_r2', 'afofl_r2', 'afoflr_r2', 'afofnl_r2', 'totccf_r2', 'vandal_rpi', 'mv.van_rpi', 'homeva_rpi', 'burgla_rpi', 'burgat_rpi', 'burgno_rpi', 'burgen_rpi', 'burglo_rpi', 'theftd_rpi', 'theftf_rpi', 'thefto_rpi', 'attmvt_rpi', 'allmvt_rpi', 'allmvc_rpi', 'biketh_rpi', 'othhhc_rpi', 'tohhcl_rpi', 'totalh_rpi', 'acquis_rpi', 'seracq_rpi', 'othacq_rpi', 'hhacq_rpi', 'common_rpi', 'wound_rpi', 'robber_rpi', 'theftp_rpi', 'thfp.r_rpi', 'compvi_rpi', 'othpth_rpi', 'topthc_rpi', 'totalp_rpi', 'totper_rpi', 'allass_rpi', 'violen_rpi', 'threat_rpi', 'totalb_rpi', 'alviol_rpi', 'mugg1_rpi', 'stealt_rpi', 'snatch_rpi', 'mug_st_rpi', 'dom_ac_rpi', 'domest_rpi', 'mugg2_rpi', 'strang_rpi', 'acquai_rpi', 'peracq_rpi', 'alvalc_rpi', 'alvdrug_rpi', 'cominj_rpi', 'comnij_rpi', 'viols_rpi', 'vioin2_rpi', 'viono2_rpi', 'racetot_rpi', 'religtot_rpi', 'agetot_rpi', 'disabtot_rpi', 'hatetot_rpi', 'hatetot2_rpi', 'violnr_rpi', 'viwinr_rpi', 'vininr_rpi', 'althft_rpi', 'stlhea_rpi', 'snstla_rpi', 'burdnl_rpi', 'burgnd_rpi', 'burnde_rpi', 'brndel_rpi', 'bndenl_rpi', 'burnda_rpi', 'thftod_rpi', 'thftpl_rpi', 'thfthh_rpi', 'alburg_rpi', 'albure_rpi', 'albuel_rpi', 'albenl_rpi', 'albura_rpi', 'othht_rpi', 'thftdm_rpi', 'burprc_rpi', 'burprc1_rpi', 'hvaprc_rpi', 'vioprc_rpi', 'alprop_rpi', 'alvinr_rpi', 'drvinr_rpi', 'frdcom_rafi', 'frd_rafi', 'frdl_rafi', 'frdlr_rafi', 'frdnl_rafi', 'bank_rafi', 'bankl_rafi', 'banklr_rafi', 'banknl_rafi', 'afee_rafi', 'afeel_rafi', 'afeelr_rafi', 'afeenl_rafi', 'ninv_rafi', 'ninvl_rafi', 'ninvlr_rafi', 'ninvnl_rafi', 'ofrd_rafi', 'ofrdl_rafi', 'ofrdlr_rafi', 'ofrdnl_rafi', 'com_rafi', 'hackua_rafi', 'virs_rafi', 'virsl_rafi', 'virslr_rafi', 'virsnl_rafi', 'vandal_rpr', 'mv.van_rpr', 'homeva_rpr', 'burgla_rpr', 'burgat_rpr', 'burgno_rpr', 'burgen_rpr', 'burglo_rpr', 'theftd_rpr', 'theftf_rpr', 'thefto_rpr', 'attmvt_rpr', 'allmvt_rpr', 'allmvc_rpr', 'biketh_rpr', 'othhhc_rpr', 'tohhcl_rpr', 'totalh_rpr', 'acquis_rpr', 'seracq_rpr', 'othacq_rpr', 'hhacq_rpr', 'common_rpr', 'wound_rpr', 'robber_rpr', 'theftp_rpr', 'thfp.r_rpr', 'compvi_rpr', 'othpth_rpr', 'topthc_rpr', 'totalp_rpr', 'totper_rpr', 'allass_rpr', 'violen_rpr', 'threat_rpr', 'totalb_rpr', 'alviol_rpr', 'mugg1_rpr', 'stealt_rpr', 'snatch_rpr', 'mug_st_rpr', 'dom_ac_rpr', 'domest_rpr', 'mugg2_rpr', 'strang_rpr', 'acquai_rpr', 'peracq_rpr', 'alvalc_rpr', 'alvdrug_rpr', 'cominj_rpr', 'comnij_rpr', 'viols_rpr', 'vioin2_rpr', 'viono2_rpr', 'racetot_rpr', 'religtot_rpr', 'agetot_rpr', 'disabtot_rpr', 'hatetot_rpr', 'hatetot2_rpr', 'violnr_rpr', 'viwinr_rpr', 'vininr_rpr', 'althft_rpr', 'stlhea_rpr', 'snstla_rpr', 'burdnl_rpr', 'burgnd_rpr', 'burnde_rpr', 'brndel_rpr', 'bndenl_rpr', 'burnda_rpr', 'thftod_rpr', 'thftpl_rpr', 'thfthh_rpr', 'alburg_rpr', 'albure_rpr', 'albuel_rpr', 'albenl_rpr', 'albura_rpr', 'othht_rpr', 'thftdm_rpr', 'burprc_rpr', 'burprc1_rpr', 'hvaprc_rpr', 'vioprc_rpr', 'alprop_rpr', 'alvinr_rpr', 'drvinr_rpr', 'frdcom_rafr', 'frd_rafr', 'frdl_rafr', 'frdlr_rafr', 'frdnl_rafr', 'bank_rafr', 'bankl_rafr', 'banklr_rafr', 'banknl_rafr', 'afee_rafr', 'afeel_rafr', 'afeelr_rafr', 'afeenl_rafr', 'ninv_rafr', 'ninvl_rafr', 'ninvlr_rafr', 'ninvnl_rafr', 'ofrd_rafr', 'ofrdl_rafr', 'ofrdlr_rafr', 'ofrdnl_rafr', 'com_rafr', 'hackua_rafr', 'virs_rafr', 'virsl_rafr', 'virslr_rafr', 'virsnl_rafr', 'althftha', 'althftah', 'althha_i', 'althah_i', 'alpropha', 'alpropah', 'alprha_i', 'alprah_i', 'bvpiburg', 'bvpicar', 'bvpiviol', 'bvpifrd', 'teen1', 'vandals1', 'drug1', 'drunk1', 'rubb1', 'noisneg1', 'abancar1', 'fairova1DV', 'cjsovb1DV', 'cjscpsb2', 'cjscrt2a2', 'cjscrt2b2', 'ratpol3', 'clcntry2', 'clcntry3', 'clloc2', 'clloc3', 'patt1', 'patt2', 'patt3', 'patt5', 'patt6', 'patt6b', 'patt7', 'catt2', 'catt2a', 'catt2b', 'nasb7hi', 'bcsvictim', 'csewvicfc', 'percluk2', 'perclloc2', 'C11NweightA', 'C11IndivWgt', 'C11gWgtInd', 'C11NweightB', 'C11HhdWgt', 'C11gWgtHhd', 'cryo4grp', 'hrpcryo4grp', 'nato4grp', 'hrpnato4grp', 'rsoc20103dig', 'hsoc20103dig', 'mcpst', 'mcpst2', 'mcpst3', 'mcpst4', 'mcpst5', 'mcpst6', 'mcpst7', 'mcpst8', 'mcpst9', 'mcpst10', 'hrpmcpst', 'bcageband01', 'bcageband02', 'bcageband03', 'bcageband04', 'bcageband05', 'bcageband06', 'bcageband07', 'bcageband08', 'bcageband09', 'bcageband10']\n"]}]},{"cell_type":"markdown","source":["##Visualize data for one variable"],"metadata":{"id":"4PZ_RvTGCBm1"}},{"cell_type":"markdown","source":["To visualize a variable you need to modify the code in the next box to tell the computer what you want to do.\n","\n","a) select a variable by replacing the variable name 'walkdark' below with the name of the variable you want to use from the data dictionary.\n","\n","b) input the labels from the data dictionary so data is labelled correctly in the resulting graphs - you can just add more value-label pairs in the list if necessary or remove those that you do not need.\n","\n","c) Choose meaningful title and labels for your plot."],"metadata":{"id":"xnLbMTalESjH"}},{"cell_type":"code","source":["#select a variable\n","var = 'walkdark'\n","\n","#input how values map to labels\n","label_dict = {1.0:\"Very safe\", 2.0:\"Fairly safe\", 3.0:\"A bit unsafe\", 4.0:\"Very unsafe\", 8.0:\"Refused\", 9.0:\"Don't know\"}\n","\n","#input title and labels\n","title = \"How safe do you feel walking alone in this area after dark?\"\n","y_label = \"Number of respondents\"\n","x_label = \"Answers\""],"metadata":{"id":"A0LgqG7xB_oD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now use the form below on the right to select the type of visualization you want to create. Not all visualizations are appropriate for every data type (try it out and you will quickly see why).\n","\n","Nominal/Ordinal: bar chart, pie chart\n","\n","Numerical/Continuous: histogram, box plot, violin plot, strip plot"],"metadata":{"id":"BN_nYyspFGZS"}},{"cell_type":"code","source":["viz = 'strip plot' # @param [\"bar chart\", \"pie chart\", \"histogram\", \"box plot\", \"violin plot\", \"strip plot\"]"],"metadata":{"id":"FQoUBeB_FFwF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if viz == 'bar chart':\n","  #Create a bar chart\n","  data = df[var].value_counts()\n","  categories = [label_dict[key] for key in data.keys()]\n","  counts = [v for v in data.values]\n","  plt.bar(categories, counts)\n","\n","  # Add labels and title (you can remove these by including a hashtag (#) in front of the line of code)\n","  #plt.xlabel(x_label)\n","  plt.ylabel(y_label)\n","  plt.title(title)\n","\n","elif viz == 'pie chart':\n","  #Create a pie chart\n","  data = df[var].value_counts()\n","  categories = [label_dict[key] for key in data.keys()]\n","  counts = [v for v in data.values]\n","  plt.pie(counts, labels=categories, autopct=\"%1.1f%%\")\n","\n","  # Add labels and title (you can remove these by including a hashtag (#) in front of the line of code)\n","  #plt.xlabel(x_label)\n","  #plt.ylabel(y_label)\n","  plt.title(title)\n","\n","elif viz == 'histogram':\n","  #Create a histogram\n","  plt.hist(df[var])\n","\n","  # Add labels and title (you can remove these by including a hashtag (#) in front of the line of code)\n","  plt.xlabel(x_label)\n","  plt.ylabel(y_label)\n","  plt.title(title)\n","\n","elif viz == 'box plot':\n","  #Create a box plot\n","  sns.boxplot(df[var])\n","\n","  # Add labels and title (you can remove these by including a hashtag (#) in front of the line of code)\n","  plt.title(title)\n","  plt.xlabel(x_label)\n","  plt.ylabel(y_label)\n","\n","\n","elif viz == 'violin plot':\n","  #Create a violin plot\n","  sns.violinplot(df[var])\n","\n","  # Add labels and title (you can remove these by including a hashtag (#) in front of the line of code)\n","  plt.title(title)\n","  plt.xlabel(x_label)\n","  plt.ylabel(y_label)\n","\n","elif viz == 'strip plot':\n","  #Create a strip plot\n","  sns.stripplot(df[var])\n","\n","  # Add labels and title (you can remove these by including a hashtag (#) in front of the line of code)\n","  plt.title(title)\n","  plt.xlabel(x_label)\n","  plt.ylabel(y_label)\n","\n","else:\n","  print(\"You need to select a chart type first\")\n","\n","\n","#Show the chart\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"tOcB7v4JFEU9","executionInfo":{"status":"ok","timestamp":1712857602879,"user_tz":-60,"elapsed":38,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"09979502-062b-4401-f03b-3d9350e7240b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#Plotting the relation between two variables"],"metadata":{"id":"8uejwg4NRpJZ"}},{"cell_type":"markdown","source":["The code below allows you to plot the relation between two variables as\n","\n","a) a scatter plot (two numeric/continous) variables,\n","\n","b) a grouped box plot (a categorical and a numeric variable),\n","\n","or c) a grouped bar chart (two categorical variables).\n","\n","Again, please select two variables by inputting their names below. Consult the data dictionary or the list generated above. You may need to switch them to get the results you want."],"metadata":{"id":"deR_OCHYRs7m"}},{"cell_type":"code","source":["variable1 = \"walkdark\"\n","variable2 = \"sex\""],"metadata":{"id":"-_ER8dbdT6Z5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#We create a new dataframe containing only the two variables we are interest in\n","df2 = df[[variable1, variable2]]\n","\n","# Delete respondents with a missing response for any of the variables\n","# For a scientific publication we would need to analyse if there is a pattern to missing responses. An alternative to deletion is 'imputing' values.\n","df2.dropna(how='any', inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"82sPLW6vnweW","executionInfo":{"status":"ok","timestamp":1712863083042,"user_tz":-60,"elapsed":271,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"6e339d53-6a74-469e-a7cd-e342850227c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-58-27199036cdf6>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df2.dropna(how='any', inplace=True)\n"]}]},{"cell_type":"markdown","source":["###Scatterplot"],"metadata":{"id":"8aGh6zw1lfy5"}},{"cell_type":"code","source":["# Add labels and title (adjust as needed)\n","plt.xlabel(\"X-axis Label\")\n","plt.ylabel(\"Y-axis Label\")\n","plt.title(\"Title\")\n","\n","# Optionally customize marker style, color, etc.\n","plt.scatter(df2[variable1], df2[variable2], marker='o', color='red', s=50)  # Marker: 'o' (circle), color: 'red', size: s=50   -> play around with these values\n","\n","# Show the chart\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"SjgeAhtdlefC","executionInfo":{"status":"ok","timestamp":1712863093313,"user_tz":-60,"elapsed":568,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"0bb069d7-a9f7-4edf-f8c7-4683da9c125a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#for two metric variables (or a metric and a 0/1 variable) we can also calculate a correlation\n","correlation, p_value = stats.pearsonr(df2[variable1], df2[variable2])\n","print(f\"The correlation between {variable1} and {variable2} is {correlation:.4f} with p = {p_value:.8f}.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lyMKnTPPmQfZ","executionInfo":{"status":"ok","timestamp":1712868733068,"user_tz":-60,"elapsed":283,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"e37f5c80-92eb-4fca-8477-940288b3f3d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The correlation between walkdark and sex is 0.2642 with p = 0.00000000.\n"]}]},{"cell_type":"markdown","source":["###Grouped Boxplot"],"metadata":{"id":"hNKNsgoYnZUJ"}},{"cell_type":"markdown","source":["For this to work variable1 needs to be the categorical variable and variable2 needs to be continuous."],"metadata":{"id":"cu7-chbind11"}},{"cell_type":"code","source":["sns.boxplot(\n","    x = variable1,\n","    y = variable2,\n","    showmeans=True,  # Optional: to display also means\n","    data=df2\n",")\n","\n","# Optional: Add a title and rotate x-axis labels for readability (if many categories)\n","plt.title(\"Grouped Boxplot\")\n","plt.xticks(rotation=45)  # Rotate x-axis labels by 45 degrees\n","plt.tight_layout()  # Adjust layout to prevent overlapping elements\n","\n","# Show the plot\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"xSZRQceCndBE","executionInfo":{"status":"ok","timestamp":1712868189783,"user_tz":-60,"elapsed":834,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"25360240-92ea-4f72-a781-e1129e1b2d7d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["If variable1 (categories) is an ordinal variable (representing a ranking), we can use the Spearman rank correlation to measure association between the two variables."],"metadata":{"id":"cOypxAk967cO"}},{"cell_type":"code","source":["#Calculate Spearman Rank Correlation\n","spearman_corr, p_value = stats.spearmanr(df2[variable1], df2[variable2])\n","\n","print(f\"The Spearman Rank Correlation for {variable1} and {variable2} is {spearman_corr:.4f} with a p-value of {p_value:.8f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QJOvnkUj66zl","executionInfo":{"status":"ok","timestamp":1712868749206,"user_tz":-60,"elapsed":291,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"ea72b62b-6c24-4ecb-b608-9c4979ed4b43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The Spearman Rank Correlation for walkdark and sex is 0.2682 with a p-value of 0.00000000\n"]}]},{"cell_type":"markdown","source":["###Grouped Bar Chart"],"metadata":{"id":"MDfOIN-znzQH"}},{"cell_type":"code","source":["#Let's create some frequency tables for how the two variables interact\n","print(\"Table of absolute frequencies:\")\n","print(pd.crosstab(df2[variable1], df2[variable2]))\n","print(\"\\n\")\n","print(\"Table of relative frequencies overall:\")\n","print(pd.crosstab(df2.walkdark, df2.sex, normalize='all')) #all add up to 100%\n","print(\"\\n\")\n","print(\"Table of relative frequencies along columns:\")\n","print(pd.crosstab(df2.walkdark, df2.sex, normalize='columns')) #columns add up to 100%\n","print(\"\\n\")\n","print(\"Table of relative frequencies along rows:\")\n","print(pd.crosstab(df2.walkdark, df2.sex, normalize='index')) #rows add up to 100%\n","print(\"\\n\")\n","print(f\"The total number of cases is N={len(df2[variable1])}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xO1lMdpBvk6q","executionInfo":{"status":"ok","timestamp":1712870432293,"user_tz":-60,"elapsed":368,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"68d0b233-c836-458b-8fe3-0b0ef66485e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Table of absolute frequencies:\n","sex        1.0   2.0\n","walkdark            \n","1.0       1694  1030\n","2.0       1449  1865\n","3.0        390   945\n","4.0        116   413\n","\n","\n","Table of relative frequencies overall:\n","sex            1.0       2.0\n","walkdark                    \n","1.0       0.214376  0.130347\n","2.0       0.183371  0.236016\n","3.0       0.049355  0.119590\n","4.0       0.014680  0.052265\n","\n","\n","Table of relative frequencies along columns:\n","sex            1.0       2.0\n","walkdark                    \n","1.0       0.464237  0.242182\n","2.0       0.397095  0.438514\n","3.0       0.106879  0.222196\n","4.0       0.031790  0.097108\n","\n","\n","Table of relative frequencies along rows:\n","sex            1.0       2.0\n","walkdark                    \n","1.0       0.621880  0.378120\n","2.0       0.437236  0.562764\n","3.0       0.292135  0.707865\n","4.0       0.219282  0.780718\n","\n","\n","The total number of cases is N=7902\n"]}]},{"cell_type":"code","source":["#Let's plot this distribution as a bar chart\n","#adjust labels and title as needed\n","var1_labels = {1.0: \"Male\", 2.0: \"Female\"} #rename the labels for better readability\n","var2_labels = {1.0:\"Very safe\", 2.0:\"Fairly safe\", 3.0:\"A bit unsafe\", 4.0:\"Very unsafe\"}\n","title = \"Walking after dark\"\n","y_label = \"Relative frequency\"\n","x_label = \"Sex\"\n","\n","counts = pd.crosstab(df2[variable1], df2[variable2], normalize='index') #create the same table as above (but in a different orientation)\n","counts.rename(var1_labels, axis = 0, inplace=True)\n","counts.rename(var2_labels, axis = 1, inplace=True)\n","counts.plot.bar()\n","plt.legend(title)\n","plt.ylabel(y_label)\n","plt.xlabel(x_label)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"id":"6zUYXmiE54AZ","executionInfo":{"status":"ok","timestamp":1712870647108,"user_tz":-60,"elapsed":833,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"37a17441-e77e-43c1-908d-9e3f7d5d5435"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Sex')"]},"metadata":{},"execution_count":109},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["A common way to test the association between two categorical/nominal variables is the Chi-Squared test."],"metadata":{"id":"QqmGeCfoDKUK"}},{"cell_type":"code","source":["# Create a contingency table using cross tabulation\n","contingency_table = pd.crosstab(df2[variable1], df2[variable2])\n","\n","# Calculate chi-squared statistic and p-value using scipy.stats.chi2_contingency\n","chi2_statistic, p_value, _, _ = stats.chi2_contingency(contingency_table.values)\n","\n","if p_value <= 0.05:\n","  print(f\"The Chi-squared test with a p-value of {p_value}, indicates that we can reject the null hypothesis of no association at the 0.05 level.\")\n","if p_value > 0.05:\n","  print(f\"The Chi-squared test with a p-value of {p_value}, indicates that we cannot reject the null hypothesis of no association at the 0.05 level.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Fi_gS99DT9c","executionInfo":{"status":"ok","timestamp":1712870940713,"user_tz":-60,"elapsed":334,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"2287a2e5-86e2-4019-bfd0-d4c48fae3c20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The Chi-squared test with a p-value of 6.120524614408301e-123, indicates that we can reject the null hypothesis of no association at the 0.05 level.\n"]}]},{"cell_type":"markdown","source":["#T-test"],"metadata":{"id":"RFEQMcO68KaS"}},{"cell_type":"markdown","source":["Caution: there are different types of t-tests and it is important to choose the correct one. If you want to use one in your dissertation, discuss the best approach with your dissertation supervisor. For the assignment, change the walkdark variable to a variable of your choice.\n","\n","The t-test is meant to compare the means of a variable for two groups. The variable should be continuous/numeric. However, ordinal variables may be treated as such."],"metadata":{"id":"tJV6EJ8z8N1P"}},{"cell_type":"code","source":["#Let's calculate mean and standard deviation\n","print(\"These are the means:\")\n","print(df.groupby('sex').walkdark.mean()) #you can adjust sex and walkdark with other variable names\n","print(\"These are the standard deviations:\")\n","print(df.groupby('sex').walkdark.std()) #you can adjust sex and walkdark with other variable names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NfzbVbg3RNlV","executionInfo":{"status":"ok","timestamp":1710962318367,"user_tz":0,"elapsed":241,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"outputId":"5b061ec5-9155-4629-fc1d-e86b43d647d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["These are the means:\n","sex\n","1.0    1.706221\n","2.0    2.174230\n","Name: walkdark, dtype: float64\n","These are the standard deviations:\n","sex\n","1.0    0.782391\n","2.0    0.906999\n","Name: walkdark, dtype: float64\n"]}]},{"cell_type":"code","source":["#We will treat the variable as continous and calculate means. Are women more afraid to walk after dark? How sure can we be that this is not the result of random variation?\n","\n","#Null hypothesis: Women and men are equally afraid to walk after dark\n","#Alternative hypothesis: Women and men differ in their fear to walk after dark"],"metadata":{"id":"BoAtBbb8klrd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Split the dataset into women and men -> adjust code to other categories if necessary\n","women = df['sex'] == 2.0\n","men = df['sex'] == 1.0\n","\n","#calculate t-test\n","from scipy.stats import ttest_ind\n","statistic, pvalue = ttest_ind(men, women, equal_var=False)\n","\n","if pvalue <= 0.05:\n","  print(f\"With a p-value of {pvalue:.4f}, the t-test for difference in means is significant at the 0.05 level. We can reject the null hypothesis that the means of both groups are equal.\")\n","elif pvalue > 0.05:\n","  print(f\"With a p-value of {pvalue:.4f}, the t-test is not significant at the 0.05 level. We cannot reject the null hypothesis.\")\n","else:\n","  print(\"Something went wrong.\")"],"metadata":{"id":"a8wDvPH4WXuQ","executionInfo":{"status":"ok","timestamp":1712869493802,"user_tz":-60,"elapsed":14,"user":{"displayName":"Daniel Marciniak","userId":"08903216772126157461"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0d62509b-0178-4821-9961-b24dca89f897"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["With a p-value of 0.0000, the t-test for difference in means is significant at the 0.05 level. We can reject the null hypothesis that the means of both groups are equal.\n"]}]}]}